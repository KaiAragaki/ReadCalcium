shinyServer(function(input, output) {
  #TODO:
  # Maybe I can keep rawcal in the calDF

  require("tidyverse")
  require("dichromat")
  
  # On File Upload ----------------------------------------------------------- 
  calData <- eventReactive(input$fileUpload,{
    
    # Takes in the file and extracts the raw 340 and 380, to use in signal/noise visualization ----
    # Test if tsv or csv (yes, I'd love to use readr, but tibbles don't recycle)
    testDelim <-  read_lines(input$fileUpload$datapath)
    if (grepl(",", testDelim)) {
     calFile <- read.csv(input$fileUpload$datapath)
    }
    else {
      calFile <-  read.delim(input$fileUpload$datapath)
    }
    calFile <- calFile[ ,-1]
    noBG <- calFile[, -1]
    raw380 <- rowMeans(noBG[seq(2, nrow(noBG), 2),])
    bg380 <- calFile[seq(2, nrow(calFile), 2), 1]
    raw340 <- rowMeans(noBG[seq(1, nrow(noBG), 2),])
    bg340 <- calFile[seq(1, nrow(calFile), 2), 1]
    # Sets baseline and standard cond time intervals ----
    interval <- c(0:4)
    condInterval <- c(.5, 1, 2, 3, 5)
    addTimes <- c(4) 
    # Loops for each cond and appends the time - not including Ionomycin time, which has its own interval. ----
    # 18 = Number of snapshots in baseline & ionomycin, 10 = number of snapshots per condition.
    for (i in 1:((nrow(calFile) - 18)/10)){
      addtlCond <- condInterval + last(interval)
      interval <- c(interval, addtlCond)
      addTimes <- c(addTimes, last(interval))
    }
    # Tacks on ionomycin time ----
    ionomycinInterval <- last(interval) + c(.5, 1, 2, 3)
    condTimes <- c(interval, ionomycinInterval)
    # Subtracts background from each cell, separates them into nice, managable variables ----
    minusBG <- calFile[2:ncol(calFile)] - calFile[,1]
    condTimesOld <- condTimes
    condTimes <- rep(condTimes, ncol(minusBG))
    values380 <- stack(minusBG[seq(2, nrow(minusBG), 2),])[, -2]
    values340 <- stack(cal340 <- minusBG[seq(1, nrow(minusBG), 2),])[, -2]
    cellNames <- stack(minusBG[seq(2, nrow(minusBG), 2),])[, -1]
    # Making the calDF tibble, with math ----
    calDF <- tibble("Condition Times" = condTimes, "380" = values380, "340" = values340, "Cell" = cellNames) %>%
      mutate("340/380" = `340`/`380`) %>%
      group_by(Cell) %>%
      mutate("Baseline" = mean(`340/380`[1:5]), "maxIono" = max(tail(`340/380`)), "dynR" = (`340/380`-Baseline)/(maxIono-Baseline) * 100) %>%
      group_by(`Condition Times`) %>%
      mutate("mean380" = mean(`380`), "mean340" = mean(`340`))
    
    # Making signal to noise tibble ----
    rawCal <- tibble("Condition Times" = condTimesOld,"Raw 380" = raw380, "Raw 340" = raw340, "380 Background" =  bg380, "340 Background" = bg340)
    
    # Final Outputs----
    list(calDF, addTimes, condTimesOld, condTimes, rawCal)
  })
  
  # On File Upload OR Text input ---------------------------------------------
  conds <- eventReactive({
    input$fileUpload
    input$conditionNames
    },{
      input <- unlist(strsplit(input$conditionNames, ","))
      conds <- c(input, "Ionomycin")
    })
  
  # On Submit Click OR Slider Change OR Text Change --------------------------
  plots <- eventReactive({
    input$submit
    input$slpDvg
    input$conditionNames
  },{
    
    # Assignments ------------------------------------------------------------
    calDF <- calData()[[1]]
    condTimes <- calData()[[4]]
    rawCal <- calData()[[5]]
    
    
    # Making the graphs ------------------------------------------------------
    calCommon <- list(theme(plot.title = element_text(hjust = 0.5), legend.position ="none", text = element_text(size = 20)), labs(x = "Time (min)", y = ""), geom_point(), geom_line(), geom_vline(xintercept = calData()[[2]]))
    # Make function
    graphCreate <- function(yValues, titleName){
      ggplot(data = calDF, aes(x =`Condition Times`, y = yValues, color = `Cell`)) +
        calCommon +
        labs(title = titleName) +
        annotate("text", x = calData()[[2]], y = max(yValues), label = conds(), size = 10)
    }
    # Call
    e <- graphCreate(calDF$`340`, "340")
    f <- graphCreate(calDF$`380`, "380")
    g <- graphCreate(calDF$`340/380`, "340/380")
    h <- graphCreate(calDF$`dynR`, "340/380 as % Dynamic Ratio")
    
    j <- ggplot(data = rawCal, aes(x = `Condition Times`)) +
      theme(plot.title = element_text(hjust = 0.5), legend.position ="none", text = element_text(size = 20)) +
      geom_ribbon(aes(ymin = `340 Background`, ymax = `Raw 340`), color = "skyblue4", fill = "skyblue", alpha = .9) +
      geom_ribbon(aes(ymin = `380 Background`, ymax = `Raw 380`), color = "tomato4", fill = "tomato", alpha = .5) + 
      labs(x = "Time (min)", y = "", title = "Signal to Noise")
    
    divergeStart <- divergeEnd <- c()
    
    # Check for above-threshold slope divergence ----
    for (i in 1:(length(calData()[[3]])-1)){
      if(calDF$mean380[i] - calDF$mean380[i+1] > input$slpDvg & calDF$mean340[i + 1] - calDF$mean340[i] > input$slpDvg | calDF$mean380[i+1] - calDF$mean380[i] > input$slpDvg & calDF$mean340[i] - calDF$mean340[i + 1] > input$slpDvg){
        divergeStart <- c(divergeStart, condTimes[i])
        divergeEnd <- c(divergeEnd, condTimes[i+1])
      }
    }
    
    rectangles <- data.frame(xstart = divergeStart, xend = divergeEnd)
    
    # If there is any, add it to the graphs ----
    if(length(rectangles) != 0){
      g <-  g + annotate("rect", xmin = rectangles$xstart, xmax = rectangles$xend, ymin = -Inf, ymax = Inf, alpha = 0.2, fill = "steelblue4")
      h <-  h + annotate("rect", xmin = rectangles$xstart, xmax = rectangles$xend, ymin = -Inf, ymax = Inf, alpha = 0.2, fill = "steelblue4")
    }
    
    # Final Output ----
    list(e, f, g, h, j)
  })
  observeEvent({
    input$submit
    input$slpDvg
    input$conditionNames
  },{
    output$X340Plot <- renderPlot({plots()[[1]]})
    output$X380Plot <- renderPlot({plots()[[2]]})
    output$X340380Plot <- renderPlot({plots()[[3]]})
    output$X340380DynPlot <- renderPlot({plots()[[4]]})
    output$SignalToNoise <- renderPlot({plots()[[5]]})
    output$calDFTable <- renderTable(as.data.frame(calData()[[1]]))
    # Make function
    graphOutput <- function(name, inputname){
      downloadHandler(
        filename = paste0(name, ".pdf"),
        content = function(file) {
          ggsave(file, plot = inputname, device = "pdf", width = 16, height = 9, units = "in")
        }
      )
    }
    # Call  
    output$downloadData1 <- graphOutput("340", plots()[[1]])
    output$downloadData2 <- graphOutput("380", plots()[[2]])
    output$downloadData3 <- graphOutput("340\\380", plots()[[3]])
    output$downloadData4 <- graphOutput("340\\380Dyn", plots()[[4]])
    output$downloadData5 <- graphOutput("Signal to Noise", plots()[[5]])
  })
})
